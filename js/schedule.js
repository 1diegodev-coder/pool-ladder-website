// Schedule Page JavaScript\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    initializeViewToggle();\n    initializeScheduleFilters();\n    initializeCalendarView();\n    initializeReminders();\n    \n    console.log('Schedule page initialized');\n});\n\n// View toggle functionality\nfunction initializeViewToggle() {\n    const viewButtons = document.querySelectorAll('.view-toggles .btn');\n    const listView = document.getElementById('listView');\n    const calendarView = document.getElementById('calendarView');\n    \n    viewButtons.forEach(button => {\n        button.addEventListener('click', function() {\n            const view = this.dataset.view;\n            \n            // Update button states\n            viewButtons.forEach(btn => btn.classList.remove('active'));\n            this.classList.add('active');\n            \n            // Switch views\n            if (view === 'calendar') {\n                listView.classList.remove('active');\n                calendarView.classList.add('active');\n                generateCalendar();\n            } else {\n                calendarView.classList.remove('active');\n                listView.classList.add('active');\n            }\n        });\n    });\n}\n\n// Filter functionality\nfunction initializeScheduleFilters() {\n    const playerFilter = document.getElementById('playerFilter');\n    const statusFilter = document.getElementById('statusFilter');\n    \n    if (playerFilter) {\n        playerFilter.addEventListener('change', function() {\n            filterMatches('player', this.value);\n        });\n    }\n    \n    if (statusFilter) {\n        statusFilter.addEventListener('change', function() {\n            filterMatches('status', this.value);\n        });\n    }\n}\n\nfunction filterMatches(filterType, filterValue) {\n    const matchCards = document.querySelectorAll('.match-card');\n    \n    matchCards.forEach(card => {\n        let showCard = true;\n        \n        if (filterType === 'player' && filterValue !== 'all') {\n            const playerNames = card.querySelectorAll('.player-name');\n            const hasPlayer = Array.from(playerNames).some(name => \n                name.textContent.trim() === filterValue\n            );\n            showCard = hasPlayer;\n        }\n        \n        if (filterType === 'status' && filterValue !== 'all') {\n            switch(filterValue) {\n                case 'upcoming':\n                    showCard = card.classList.contains('upcoming');\n                    break;\n                case 'live':\n                    showCard = card.classList.contains('live');\n                    break;\n                case 'today':\n                    const dayHeader = card.closest('.schedule-day')?.querySelector('.day-header');\n                    showCard = dayHeader?.textContent.includes('TODAY');\n                    break;\n            }\n        }\n        \n        if (showCard) {\n            card.style.display = '';\n            card.style.animation = 'fadeInScale 0.3s ease';\n        } else {\n            card.style.display = 'none';\n        }\n    });\n}\n\n// Calendar view functionality\nfunction initializeCalendarView() {\n    const prevBtn = document.getElementById('prevMonth');\n    const nextBtn = document.getElementById('nextMonth');\n    \n    if (prevBtn) {\n        prevBtn.addEventListener('click', function() {\n            changeMonth(-1);\n        });\n    }\n    \n    if (nextBtn) {\n        nextBtn.addEventListener('click', function() {\n            changeMonth(1);\n        });\n    }\n}\n\nlet currentCalendarDate = new Date();\n\nfunction generateCalendar() {\n    const calendarGrid = document.getElementById('calendarGrid');\n    const monthHeader = document.getElementById('currentMonth');\n    \n    if (!calendarGrid || !monthHeader) return;\n    \n    const year = currentCalendarDate.getFullYear();\n    const month = currentCalendarDate.getMonth();\n    \n    // Update header\n    monthHeader.textContent = new Intl.DateTimeFormat('en-US', {\n        month: 'long',\n        year: 'numeric'\n    }).format(currentCalendarDate);\n    \n    // Clear existing calendar\n    calendarGrid.innerHTML = '';\n    \n    // Add day headers\n    const dayHeaders = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    dayHeaders.forEach(day => {\n        const dayHeader = document.createElement('div');\n        dayHeader.className = 'calendar-day-header';\n        dayHeader.textContent = day;\n        dayHeader.style.cssText = `\n            background: var(--electric-cyan);\n            color: var(--obsidian-black);\n            padding: var(--spacing-md);\n            text-align: center;\n            font-weight: 700;\n            font-size: 0.8rem;\n            text-transform: uppercase;\n        `;\n        calendarGrid.appendChild(dayHeader);\n    });\n    \n    // Get first day of month and number of days\n    const firstDay = new Date(year, month, 1);\n    const lastDay = new Date(year, month + 1, 0);\n    const daysInMonth = lastDay.getDate();\n    const startingDayOfWeek = firstDay.getDay();\n    \n    // Add empty cells for days before month starts\n    for (let i = 0; i < startingDayOfWeek; i++) {\n        const emptyDay = document.createElement('div');\n        emptyDay.className = 'calendar-day other-month';\n        calendarGrid.appendChild(emptyDay);\n    }\n    \n    // Add days of the month\n    for (let day = 1; day <= daysInMonth; day++) {\n        const dayElement = document.createElement('div');\n        dayElement.className = 'calendar-day';\n        \n        const today = new Date();\n        if (year === today.getFullYear() && \n            month === today.getMonth() && \n            day === today.getDate()) {\n            dayElement.classList.add('today');\n        }\n        \n        dayElement.innerHTML = `\n            <div class=\"day-number\">${day}</div>\n            <div class=\"day-matches\">${generateDayMatches(day, month, year)}</div>\n        `;\n        \n        calendarGrid.appendChild(dayElement);\n    }\n}\n\nfunction generateDayMatches(day, month, year) {\n    // Sample match data - in a real app, this would come from an API\n    const sampleMatches = {\n        '11': [\n            { players: 'Tony vs Bruce', type: 'live', time: '7:30 PM' },\n            { players: 'Diana vs Clark', type: 'live', time: '8:00 PM' },\n            { players: 'Alex vs Lisa', type: 'upcoming', time: '9:00 PM' }\n        ],\n        '12': [\n            { players: 'Mike vs Jake', type: 'championship', time: '8:00 PM' },\n            { players: 'Sarah vs Robert', type: 'upcoming', time: '6:30 PM' }\n        ],\n        '13': [\n            { players: 'Emma vs David', type: 'upcoming', time: '7:15 PM' }\n        ],\n        '14': [\n            { players: 'Kevin vs Tony', type: 'upcoming', time: '2:00 PM' }\n        ]\n    };\n    \n    const dayMatches = sampleMatches[day.toString()] || [];\n    \n    return dayMatches.map(match => \n        `<div class=\"calendar-match ${match.type}\" title=\"${match.players} - ${match.time}\">\n            ${match.players}\n        </div>`\n    ).join('');\n}\n\nfunction changeMonth(direction) {\n    currentCalendarDate.setMonth(currentCalendarDate.getMonth() + direction);\n    generateCalendar();\n}\n\n// Reminder functionality\nfunction initializeReminders() {\n    const reminderButtons = document.querySelectorAll('.btn:contains(\"Set Reminder\")');\n    \n    reminderButtons.forEach(button => {\n        button.addEventListener('click', function(e) {\n            e.preventDefault();\n            \n            const matchCard = this.closest('.match-card');\n            const players = Array.from(matchCard.querySelectorAll('.player-name'))\n                .map(name => name.textContent.trim())\n                .join(' vs ');\n            const time = matchCard.querySelector('.match-time')?.textContent || 'TBD';\n            \n            setMatchReminder(players, time, this);\n        });\n    });\n}\n\nfunction setMatchReminder(matchInfo, time, button) {\n    // In a real app, this would integrate with calendar APIs or push notifications\n    const originalText = button.textContent;\n    button.textContent = 'Reminder Set!';\n    button.classList.remove('btn-outline');\n    button.classList.add('btn-primary');\n    button.disabled = true;\n    \n    // Show confirmation notification\n    showNotification(`Reminder set for ${matchInfo} at ${time}`, 'success');\n    \n    // Simulate reminder functionality\n    setTimeout(() => {\n        button.textContent = 'Reminded';\n        button.style.opacity = '0.7';\n    }, 2000);\n}\n\n// Live match updates\nfunction initializeLiveUpdates() {\n    const liveMatches = document.querySelectorAll('.match-card.live');\n    \n    liveMatches.forEach(match => {\n        const scoreElements = match.querySelectorAll('.current-score');\n        const timeElement = match.querySelector('.match-time');\n        \n        // Simulate score updates\n        setInterval(() => {\n            if (Math.random() < 0.2) { // 20% chance every interval\n                updateMatchScore(scoreElements);\n            }\n            \n            if (timeElement && timeElement.textContent.includes('elapsed')) {\n                updateMatchTime(timeElement);\n            }\n        }, 10000); // Every 10 seconds\n    });\n}\n\nfunction updateMatchScore(scoreElements) {\n    scoreElements.forEach(scoreEl => {\n        const currentScore = parseInt(scoreEl.textContent) || 0;\n        if (currentScore < 8 && Math.random() < 0.5) { // 50% chance to update this player\n            scoreEl.textContent = currentScore + 1;\n            \n            // Add update animation\n            scoreEl.style.animation = 'scoreUpdate 0.5s ease';\n            \n            // Check for match completion\n            if (currentScore + 1 >= 8) {\n                setTimeout(() => {\n                    completeMatch(scoreEl.closest('.match-card'));\n                }, 2000);\n            }\n        }\n    });\n}\n\nfunction updateMatchTime(timeElement) {\n    const timeText = timeElement.textContent;\n    const timeMatch = timeText.match(/(\\d+):(\\d+)/);\n    \n    if (timeMatch) {\n        let minutes = parseInt(timeMatch[1]);\n        let seconds = parseInt(timeMatch[2]);\n        \n        seconds += 10; // Add 10 seconds\n        if (seconds >= 60) {\n            minutes += 1;\n            seconds = 0;\n        }\n        \n        timeElement.textContent = timeText.replace(\n            /\\d+:\\d+/, \n            `${minutes}:${seconds.toString().padStart(2, '0')}`\n        );\n    }\n}\n\nfunction completeMatch(matchCard) {\n    // Remove live status\n    matchCard.classList.remove('live');\n    matchCard.classList.add('completed');\n    \n    // Update status indicator\n    const statusIndicator = matchCard.querySelector('.status-indicator');\n    if (statusIndicator) {\n        statusIndicator.textContent = '✓ COMPLETED';\n        statusIndicator.className = 'status-indicator completed-indicator';\n    }\n    \n    // Show completion notification\n    showNotification('Match completed! Results will be updated.', 'info');\n}\n\n// Notification system\nfunction showNotification(message, type = 'info') {\n    const notification = document.createElement('div');\n    notification.className = `notification notification-${type}`;\n    notification.style.cssText = `\n        position: fixed;\n        top: 100px;\n        right: 20px;\n        background: var(--obsidian-black);\n        border: 2px solid var(--electric-cyan);\n        border-radius: 8px;\n        padding: 1rem 1.5rem;\n        color: var(--chrome-silver);\n        z-index: 10000;\n        animation: slideInRight 0.3s ease, fadeOut 0.3s ease 4.7s;\n        max-width: 300px;\n        box-shadow: 0 4px 20px rgba(0, 212, 255, 0.3);\n    `;\n    \n    if (type === 'success') {\n        notification.style.borderColor = 'var(--neon-green)';\n        notification.style.boxShadow = '0 4px 20px rgba(57, 255, 20, 0.3)';\n    }\n    \n    notification.textContent = message;\n    document.body.appendChild(notification);\n    \n    // Auto remove after 5 seconds\n    setTimeout(() => {\n        if (notification.parentNode) {\n            document.body.removeChild(notification);\n        }\n    }, 5000);\n}\n\n// Watch live functionality\ndocument.addEventListener('click', function(e) {\n    if (e.target.textContent.includes('Watch Live') || e.target.textContent.includes('WATCH LIVE')) {\n        e.preventDefault();\n        \n        const matchCard = e.target.closest('.match-card');\n        const players = Array.from(matchCard.querySelectorAll('.player-name'))\n            .map(name => name.textContent.trim())\n            .join(' vs ');\n        \n        // Simulate opening live stream\n        showNotification(`Opening live stream for ${players}...`, 'info');\n        \n        // In a real app, this would open a live stream or redirect\n        setTimeout(() => {\n            alert(`🎱 Live Stream: ${players}\\n\\nThis would open the live stream player in a real implementation.`);\n        }, 1000);\n    }\n});\n\n// Add custom styles for schedule page\nconst style = document.createElement('style');\nstyle.textContent = `\n    @keyframes fadeInScale {\n        from { opacity: 0; transform: scale(0.95); }\n        to { opacity: 1; transform: scale(1); }\n    }\n    \n    @keyframes slideInRight {\n        from { transform: translateX(100%); opacity: 0; }\n        to { transform: translateX(0); opacity: 1; }\n    }\n    \n    @keyframes fadeOut {\n        to { opacity: 0; transform: translateX(100%); }\n    }\n    \n    @keyframes scoreUpdate {\n        0% { transform: scale(1); }\n        50% { transform: scale(1.3); color: var(--neon-green); text-shadow: 0 0 20px var(--neon-green); }\n        100% { transform: scale(1); }\n    }\n    \n    .completed-indicator {\n        background: var(--neon-green) !important;\n        color: var(--obsidian-black) !important;\n        animation: none !important;\n    }\n    \n    .match-card.completed {\n        border-color: var(--neon-green) !important;\n        opacity: 0.8;\n    }\n    \n    .calendar-match:hover {\n        transform: scale(1.05);\n        z-index: 10;\n        position: relative;\n    }\n    \n    .notification {\n        font-weight: 500;\n        font-size: 0.9rem;\n        line-height: 1.4;\n    }\n`;\ndocument.head.appendChild(style);\n\n// Initialize live updates\nsetTimeout(initializeLiveUpdates, 2000);\n\n// Generate initial calendar if calendar view is active\nif (document.querySelector('.calendar-view.active')) {\n    generateCalendar();\n}"