// Rules Page JavaScript\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    initializeRulesNavigation();\n    initializeScrollSpy();\n    initializeInteractiveElements();\n    \n    console.log('Rules page initialized');\n});\n\n// Navigation between rule sections\nfunction initializeRulesNavigation() {\n    const navTabs = document.querySelectorAll('.nav-tab');\n    const sections = document.querySelectorAll('.rules-section');\n    \n    navTabs.forEach(tab => {\n        tab.addEventListener('click', function() {\n            const targetSection = this.dataset.section;\n            \n            // Update tab states\n            navTabs.forEach(t => t.classList.remove('active'));\n            this.classList.add('active');\n            \n            // Update section visibility\n            sections.forEach(section => {\n                if (section.id === targetSection) {\n                    section.classList.add('active');\n                } else {\n                    section.classList.remove('active');\n                }\n            });\n            \n            // Scroll to top of rules content\n            document.querySelector('.rules-nav').scrollIntoView({\n                behavior: 'smooth',\n                block: 'start'\n            });\n        });\n    });\n}\n\n// Scroll spy for automatic tab highlighting\nfunction initializeScrollSpy() {\n    const sections = document.querySelectorAll('.rules-section');\n    const navTabs = document.querySelectorAll('.nav-tab');\n    \n    const observer = new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n            if (entry.isIntersecting && entry.intersectionRatio > 0.5) {\n                const sectionId = entry.target.id;\n                \n                // Update active tab\n                navTabs.forEach(tab => {\n                    if (tab.dataset.section === sectionId) {\n                        navTabs.forEach(t => t.classList.remove('active'));\n                        tab.classList.add('active');\n                    }\n                });\n            }\n        });\n    }, {\n        threshold: 0.5,\n        rootMargin: '-80px 0px -50% 0px'\n    });\n    \n    sections.forEach(section => {\n        observer.observe(section);\n    });\n}\n\n// Interactive elements\nfunction initializeInteractiveElements() {\n    // Rule item hover effects\n    const ruleItems = document.querySelectorAll('.rule-item');\n    ruleItems.forEach(item => {\n        item.addEventListener('mouseenter', function() {\n            this.style.transform = 'translateY(-5px) scale(1.02)';\n        });\n        \n        item.addEventListener('mouseleave', function() {\n            this.style.transform = 'translateY(-3px) scale(1)';\n        });\n    });\n    \n    // Format card interactions\n    const formatCards = document.querySelectorAll('.format-card');\n    formatCards.forEach(card => {\n        card.addEventListener('click', function() {\n            showFormatDetails(this);\n        });\n    });\n    \n    // Foul item click for more details\n    const foulItems = document.querySelectorAll('.foul-item');\n    foulItems.forEach(item => {\n        item.addEventListener('click', function() {\n            showFoulDetails(this);\n        });\n    });\n    \n    // Contact item click actions\n    const contactItems = document.querySelectorAll('.contact-item');\n    contactItems.forEach(item => {\n        item.addEventListener('click', function() {\n            handleContactClick(this);\n        });\n    });\n    \n    // Penalty level hover effects\n    const penaltyLevels = document.querySelectorAll('.penalty-level');\n    penaltyLevels.forEach(level => {\n        level.addEventListener('click', function() {\n            showPenaltyDetails(this);\n        });\n    });\n}\n\nfunction showFormatDetails(card) {\n    const cardTitle = card.querySelector('h3').textContent;\n    const cardDescription = card.querySelector('p').textContent;\n    \n    const modal = createModal('Format Details', `\n        <div style=\"text-align: center; margin-bottom: 2rem;\">\n            <div style=\"font-size: 3rem; margin-bottom: 1rem;\">${card.querySelector('.format-icon').textContent}</div>\n            <h3 style=\"color: var(--electric-cyan); margin-bottom: 1rem; text-transform: uppercase;\">${cardTitle}</h3>\n            <p style=\"color: var(--chrome-silver); line-height: 1.6; margin-bottom: 2rem;\">${cardDescription}</p>\n        </div>\n        \n        <div style=\"background: var(--obsidian-black); padding: 1.5rem; border-radius: 8px; border: 1px solid rgba(192, 192, 192, 0.2);\">\n            <h4 style=\"color: var(--electric-cyan); margin-bottom: 1rem;\">Additional Details:</h4>\n            <div style=\"color: var(--chrome-silver); line-height: 1.6;\">\n                ${getFormatAdditionalDetails(cardTitle)}\n            </div>\n        </div>\n    `);\n    \n    document.body.appendChild(modal);\n}\n\nfunction getFormatAdditionalDetails(title) {\n    const details = {\n        'Ladder System': `\n            <p>• Players advance by defeating higher-ranked opponents</p>\n            <p>• Challenge range limited to maintain competitive balance</p>\n            <p>• Automatic ranking updates after each match</p>\n            <p>• Inactive players gradually lose ranking position</p>\n        `,\n        'Match Scheduling': `\n            <p>• Players coordinate directly via league messaging system</p>\n            <p>• Venue availability displayed in real-time</p>\n            <p>• Automatic reminders sent 24 hours before matches</p>\n            <p>• Reschedule options available up to 2 hours before start time</p>\n        `,\n        'Championships': `\n            <p>• Separate tournament bracket system</p>\n            <p>• Qualification based on regular season performance</p>\n            <p>• Prize pool contributed by entry fees</p>\n            <p>• Championship points separate from ladder rankings</p>\n        `\n    };\n    \n    return details[title] || '<p>No additional details available.</p>';\n}\n\nfunction showFoulDetails(item) {\n    const foulDescription = item.querySelector('.foul-description').innerHTML;\n    const foulType = foulDescription.split(':')[0].replace('<strong>', '').replace('</strong>', '');\n    \n    const modal = createModal(`Foul Details: ${foulType}`, `\n        <div style=\"text-align: center; margin-bottom: 2rem;\">\n            <div style=\"font-size: 3rem; color: var(--amber-warning); margin-bottom: 1rem;\">⚠️</div>\n            <div style=\"color: var(--chrome-silver); font-size: 1.1rem; margin-bottom: 2rem;\">${foulDescription}</div>\n        </div>\n        \n        <div style=\"background: var(--obsidian-black); padding: 1.5rem; border-radius: 8px; border: 1px solid var(--amber-warning);\">\n            <h4 style=\"color: var(--amber-warning); margin-bottom: 1rem;\">Consequences:</h4>\n            <div style=\"color: var(--chrome-silver); line-height: 1.6;\">\n                <p>• Opponent receives <strong style=\"color: var(--neon-green);\">ball-in-hand</strong> anywhere on table</p>\n                <p>• Any balls pocketed during the foul remain pocketed</p>\n                <p>• Turn passes immediately to opponent</p>\n                <p>• Repeated fouls may result in conduct warnings</p>\n            </div>\n        </div>\n        \n        <div style=\"background: rgba(57, 255, 20, 0.1); padding: 1rem; border-radius: 8px; border: 1px solid var(--neon-green); margin-top: 1rem;\">\n            <h4 style=\"color: var(--neon-green); margin-bottom: 0.5rem;\">Prevention Tips:</h4>\n            <div style=\"color: var(--chrome-silver); font-size: 0.9rem;\">\n                ${getFoulPreventionTips(foulType)}\n            </div>\n        </div>\n    `);\n    \n    document.body.appendChild(modal);\n}\n\nfunction getFoulPreventionTips(foulType) {\n    const tips = {\n        'Cue Ball Scratch': 'Practice cue ball control and use appropriate force for each shot.',\n        'Wrong Ball First': 'Carefully identify your target balls before shooting.',\n        'No Rail': 'Always ensure a ball will hit a rail if no ball is pocketed.',\n        'Double Hit': 'Follow through smoothly and avoid jabbing at the cue ball.'\n    };\n    \n    return tips[foulType] || 'Practice proper technique and stay focused during play.';\n}\n\nfunction handleContactClick(item) {\n    const contactText = item.querySelector('.contact-text').textContent;\n    \n    if (contactText.includes('Email:')) {\n        const email = contactText.replace('Email: ', '');\n        window.location.href = `mailto:${email}?subject=Pool Ladder Inquiry`;\n    } else if (contactText.includes('Phone:')) {\n        const phone = contactText.replace('Phone: ', '');\n        if (navigator.userAgent.match(/(iPhone|iPod|iPad|Android|BlackBerry)/)) {\n            window.location.href = `tel:${phone}`;\n        } else {\n            showNotification(`Call us at: ${phone}`, 'info');\n        }\n    } else {\n        showNotification('Contact information copied to clipboard', 'success');\n    }\n}\n\nfunction showPenaltyDetails(level) {\n    const severity = level.querySelector('.penalty-severity').textContent;\n    const description = level.querySelector('.penalty-description').textContent;\n    \n    const modal = createModal(`Disciplinary Action: ${severity}`, `\n        <div style=\"text-align: center; margin-bottom: 2rem;\">\n            <div style=\"font-size: 2.5rem; margin-bottom: 1rem;\">${getPenaltyIcon(severity)}</div>\n            <h3 style=\"color: var(--crimson-red); margin-bottom: 1rem; text-transform: uppercase;\">${severity}</h3>\n            <p style=\"color: var(--chrome-silver); font-size: 1.1rem; margin-bottom: 2rem;\">${description}</p>\n        </div>\n        \n        <div style=\"background: var(--obsidian-black); padding: 1.5rem; border-radius: 8px; border: 1px solid var(--crimson-red);\">\n            <h4 style=\"color: var(--crimson-red); margin-bottom: 1rem;\">Typical Reasons:</h4>\n            <div style=\"color: var(--chrome-silver); line-height: 1.6;\">\n                ${getPenaltyReasons(severity)}\n            </div>\n        </div>\n        \n        <div style=\"background: rgba(57, 255, 20, 0.1); padding: 1rem; border-radius: 8px; border: 1px solid var(--neon-green); margin-top: 1rem;\">\n            <h4 style=\"color: var(--neon-green); margin-bottom: 0.5rem;\">Appeal Process:</h4>\n            <p style=\"color: var(--chrome-silver); font-size: 0.9rem;\">Disciplinary actions can be appealed within 48 hours by contacting league administration with supporting evidence.</p>\n        </div>\n    `);\n    \n    document.body.appendChild(modal);\n}\n\nfunction getPenaltyIcon(severity) {\n    const icons = {\n        'WARNING': '⚠️',\n        'SUSPENSION': '🚫',\n        'EXPULSION': '❌'\n    };\n    return icons[severity] || '⚠️';\n}\n\nfunction getPenaltyReasons(severity) {\n    const reasons = {\n        'WARNING': `\n            <p>• Minor unsportsmanlike conduct</p>\n            <p>• Repeated tardiness</p>\n            <p>• Inappropriate language</p>\n            <p>• Equipment misuse</p>\n        `,\n        'SUSPENSION': `\n            <p>• Verbal confrontation with players</p>\n            <p>• Persistent rule violations</p>\n            <p>• Disrespecting officials</p>\n            <p>• Repeated warnings ignored</p>\n        `,\n        'EXPULSION': `\n            <p>• Physical altercations</p>\n            <p>• Severe harassment or threats</p>\n            <p>• Cheating or match fixing</p>\n            <p>• Violation of suspension terms</p>\n        `\n    };\n    \n    return reasons[severity] || '<p>Case-by-case evaluation</p>';\n}\n\nfunction createModal(title, content) {\n    const modal = document.createElement('div');\n    modal.className = 'rules-modal';\n    modal.style.cssText = `\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0, 0, 0, 0.8);\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        z-index: 10000;\n        animation: fadeIn 0.3s ease;\n    `;\n    \n    const modalContent = document.createElement('div');\n    modalContent.style.cssText = `\n        background: linear-gradient(135deg, var(--obsidian-black) 0%, var(--deep-charcoal) 100%);\n        border: 2px solid var(--electric-cyan);\n        border-radius: 12px;\n        padding: 2rem;\n        max-width: 600px;\n        width: 90%;\n        max-height: 90vh;\n        overflow-y: auto;\n        color: var(--chrome-silver);\n        animation: slideIn 0.3s ease;\n        position: relative;\n    `;\n    \n    modalContent.innerHTML = `\n        <button style=\"\n            position: absolute;\n            top: 1rem;\n            right: 1rem;\n            background: none;\n            border: none;\n            color: var(--chrome-silver);\n            font-size: 1.5rem;\n            cursor: pointer;\n            transition: color 0.3s ease;\n        \" onclick=\"this.closest('.rules-modal').remove()\">&times;</button>\n        <h2 style=\"\n            color: var(--electric-cyan);\n            margin-bottom: 2rem;\n            text-align: center;\n            font-size: 1.5rem;\n            text-transform: uppercase;\n        \">${title}</h2>\n        ${content}\n    `;\n    \n    modal.appendChild(modalContent);\n    \n    // Close on outside click\n    modal.addEventListener('click', (e) => {\n        if (e.target === modal) {\n            modal.remove();\n        }\n    });\n    \n    // Close on Escape key\n    const handleEscape = (e) => {\n        if (e.key === 'Escape') {\n            modal.remove();\n            document.removeEventListener('keydown', handleEscape);\n        }\n    };\n    document.addEventListener('keydown', handleEscape);\n    \n    return modal;\n}\n\nfunction showNotification(message, type = 'info') {\n    const notification = document.createElement('div');\n    notification.className = `notification notification-${type}`;\n    notification.style.cssText = `\n        position: fixed;\n        top: 100px;\n        right: 20px;\n        background: var(--obsidian-black);\n        border: 2px solid var(--electric-cyan);\n        border-radius: 8px;\n        padding: 1rem 1.5rem;\n        color: var(--chrome-silver);\n        z-index: 10000;\n        animation: slideInRight 0.3s ease, fadeOut 0.3s ease 2.7s;\n        max-width: 300px;\n        box-shadow: 0 4px 20px rgba(0, 212, 255, 0.3);\n    `;\n    \n    if (type === 'success') {\n        notification.style.borderColor = 'var(--neon-green)';\n        notification.style.boxShadow = '0 4px 20px rgba(57, 255, 20, 0.3)';\n    }\n    \n    notification.textContent = message;\n    document.body.appendChild(notification);\n    \n    setTimeout(() => {\n        if (notification.parentNode) {\n            document.body.removeChild(notification);\n        }\n    }, 3000);\n}\n\n// Add keyboard shortcuts for navigation\ndocument.addEventListener('keydown', function(e) {\n    if (e.altKey) {\n        const tabs = document.querySelectorAll('.nav-tab');\n        const activeIndex = Array.from(tabs).findIndex(tab => tab.classList.contains('active'));\n        \n        switch(e.key) {\n            case 'ArrowLeft':\n                e.preventDefault();\n                const prevIndex = activeIndex > 0 ? activeIndex - 1 : tabs.length - 1;\n                tabs[prevIndex].click();\n                break;\n                \n            case 'ArrowRight':\n                e.preventDefault();\n                const nextIndex = activeIndex < tabs.length - 1 ? activeIndex + 1 : 0;\n                tabs[nextIndex].click();\n                break;\n        }\n    }\n});\n\n// Add print stylesheet\nconst printStyles = document.createElement('style');\nprintStyles.textContent = `\n    @media print {\n        .header, .footer, .rules-nav {\n            display: none !important;\n        }\n        \n        .rules-section {\n            display: block !important;\n            page-break-before: always;\n        }\n        \n        .rules-section:first-of-type {\n            page-break-before: auto;\n        }\n        \n        .rule-item, .format-card, .dispute-card {\n            page-break-inside: avoid;\n        }\n        \n        body {\n            background: white !important;\n            color: black !important;\n        }\n        \n        .rule-item, .format-card {\n            border: 2px solid #ccc !important;\n            background: #f9f9f9 !important;\n        }\n    }\n`;\ndocument.head.appendChild(printStyles);\n\n// Add custom animations\nconst style = document.createElement('style');\nstyle.textContent = `\n    @keyframes fadeIn {\n        from { opacity: 0; }\n        to { opacity: 1; }\n    }\n    \n    @keyframes slideIn {\n        from { transform: translateY(-50px); opacity: 0; }\n        to { transform: translateY(0); opacity: 1; }\n    }\n    \n    @keyframes slideInRight {\n        from { transform: translateX(100%); opacity: 0; }\n        to { transform: translateX(0); opacity: 1; }\n    }\n    \n    @keyframes fadeOut {\n        to { opacity: 0; transform: translateX(100%); }\n    }\n    \n    .rule-item, .format-card, .dispute-card, .principle-card {\n        cursor: pointer;\n    }\n    \n    .contact-item:hover {\n        background: rgba(0, 212, 255, 0.1) !important;\n        cursor: pointer;\n        transform: scale(1.02);\n    }\n    \n    .penalty-level:hover {\n        background: rgba(220, 20, 60, 0.1) !important;\n        cursor: pointer;\n        transform: scale(1.05);\n    }\n    \n    .foul-item {\n        cursor: pointer;\n    }\n`;\ndocument.head.appendChild(style);\n\nconsole.log('Alt + Left/Right arrows to navigate between rule sections');"